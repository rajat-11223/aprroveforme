<div class="row">
  <div class="large-12 columns">
    <%= simple_form_for(@approval, :html => { :class => 'form-inline' }) do |f| %>
    <%= f.error_notification %>
    <%= f.input :title, :placeholder => "Give it a title", :input_html => { :class=>"large-9 small-8 columns end" } %> 

    <div class="row">
      <%= f.label :link, :label => "Select file" %>
      
      <%  if @approval.link_title %>
      <div class="large-3 columns">
        <div id="result"><%= link_to @approval.link_title, @approval.link %></div> 
      </div>
      <div class="large-7 small-8 columns">
        <a onclick="createPicker()" class="button small" style="float: right;">Change File</a>
      </div>
      
      <% else %>
      <a onclick="createPicker()" class="button primary large-4 small-8 columns">Select File from Google Drive</a>
      <div id="result">
      </div>
      <div class="large-5 columns end">
      <small><input id="perms" name="perms" value="writer" type="checkbox">  *Grant approvers edit permissions to this document. If left unchecked, approvers will still be able to read the doc.</small> 
      </div>
      <% end %>
    </div>

    <% if @approval.errors[:link].any? %>
    <div class="row">
      <%= f.error :link, :class=>"large-2 large-offset-2 columns alert-box alert", :style=>"float: left;"  %> 
    </div>
    <% end %>

    <br />
      
    <%= f.input :description, :placeholder => "What kind of feedback are you looking for?", :input_html => { :class => "large-9 columns end", :rows => "3" } %>

    <br />     


    <%= f.input :deadline, :required => true, :placeholder =>"MM/DD/YYYY",
            :input_html => { 
            :id => "datepicker", 
            :class=>"large-9 small-9 columns end",
            :value => (@approval.deadline.strftime("%m/%d/%Y") if @approval.deadline)}, 
            :as => :string
          
    %>


      </br>
      <h6 class="subheader">
      <abbr title="required">*</abbr> Who will be signing off on this approval?</br>
      </h6>
      <% if @approval.errors[:approvers].any? %>
      <div class="row">
      <%= f.error :approvers, :class=>"alert-box alert" %>
      </div>
      <% end %>
      <table>
        <tr>
          <td>Name</td><td>Email Address</td><td>Required?</td>
        </tr>
      <%= f.simple_fields_for :approvers do |builder| %>
        <%= render 'approver_form', :f => builder %> 
      <% end %>


      <!-- leave the tr add row for adding new approvers -->
      <tr class="add">
      </tr>
      <!-- end extra tr -->

      </table>
  
      <p>
      
      <%= button_to_add_fields('Add Approver', f, :approvers, )%>
      
      </p>
      </br>
      <%= f.button :submit, :class => "button" %>  
      <% if f.object.new_record? %>
      <%= link_to 'Cancel', root_url, :class=>"button secondary" %>
      <% else %>
      <%= link_to 'Back', @approval, :class=>"button " %>
      <% end %>
 


<% end %>
</div>
</div>


 <!-- The standard Google Loader script. -->
    <script src="http://www.google.com/jsapi"></script>
    <script type="text/javascript">

    
    // Use the Google Loader script to load the google.picker script.
    //google.setOnLoadCallback(createPicker);
    google.load('picker', '1');

    // Create and render a Picker object for searching images.
    function createPicker() {
         var view = new google.picker.View(google.picker.ViewId.DOCS);
          //view.setMimeTypes("image/png,image/jpeg,image/jpg");    
          var picker = new google.picker.PickerBuilder()
          //.enableFeature(google.picker.Feature.NAV_HIDDEN)
          //.enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
          .setAppId("<%= ENV['GOOGLE_ID']%>")
          .setOAuthToken("<%= current_user.token %>") //Optional: The auth token used in the current Drive API session.
          .addView(view)
          .addView(new google.picker.DocsUploadView())
          .setCallback(pickerCallback)
          .build();
       picker.setVisible(true);

    }
    

    // A simple callback implementation.
    function pickerCallback(data) {
      var url = 'nothing';
      if (data[google.picker.Response.ACTION] == google.picker.Action.PICKED) {
        var doc = data[google.picker.Response.DOCUMENTS][0];
        url = doc[google.picker.Document.URL];
        title = doc.name;
        id = doc.id;
        type = doc.type;
        embed = doc[google.picker.Document.EMBEDDABLE_URL ];
      }

      var message = "<input id=\"approval_link\" name=\"approval[link]\" type=\"hidden\" value=\"" + url + "\">";
      message = message + "<input id=\"approval_embed\" name=\"approval[embed]\" type=\"hidden\" value=\"" + embed + "\">";
      message = message + "<input id=\"approval_link_title\" name=\"approval[link_title]\" type=\"hidden\" value=\"" + title + "\">";
      message = message + "<input id=\"approval_link_id\" name=\"approval[link_id]\" type=\"hidden\" value=\"" + id + "\">";
      message = message + "<input id=\"approval_link_type\" name=\"approval[link_type]\" type=\"hidden\" value=\"" + type + "\">";
      message = message + title
      document.getElementById('result').innerHTML = message;
    }

  
    </script>


<script type="text/javascript">
function add_fields(link, association, content) {
  var new_id = new Date().getTime();
  var regexp = new RegExp("new_" + association, "g");
  //document.body.insertBefore(content.replace(regexp, new_id), $('div#insert'));
  $("tr.add").before(content.replace(regexp, new_id));
  //$(link).before(content.replace(regexp, new_id));
}

$(function() {
    $( "#datepicker" ).datepicker(  );
  });

</script>